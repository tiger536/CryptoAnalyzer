@{
    ViewData["Title"] = "Coin Details";
}
@model CoinViewModel
@using Newtonsoft.Json;
@using CryptoAnalyzer.Extensions;
@using System.Globalization

<div class="statsBlock">
    <div class="row">
        <div class="col">
            <div class="statsLabel">
                Price
            </div>
            <div class="statsItem">
                <div class="statsValue">$ @Model.CoinRecap.LastPrice.RoundXSignificantDigit(3)</div>
                <span class="statsVariation @(Model.CoinRecap.PriceVariation24h > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.PriceVariation24h > 0 ? "up":"down")"></i>
                    @(Math.Round(Model.CoinRecap.PriceVariation24h*100, 2))%
                </span>
            </div>
        </div>
        <div class="col">
            <div class="statsLabel">
                Volume
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">$ @Model.CoinRecap.LastVolume.ToString("C2", CultureInfo.CurrentCulture)</div>
                <span class="statsVariation @(Model.CoinRecap.VoumeVariation24h > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.VoumeVariation24h > 0 ? "up":"down")"></i>
                    @(Math.Round(Model.CoinRecap.VoumeVariation24h * 100, 2))%
                </span>
            </div>
            <div class="statsLabel">
                Market Cap
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">$ @Model.CoinRecap.LastMarketCap.ToString("C2", CultureInfo.CurrentCulture)</div>
                <span class="statsVariation @(Model.CoinRecap.MarketCapVariation24h > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.MarketCapVariation24h > 0 ? "up":"down")"></i>
                    @(Math.Round(Model.CoinRecap.MarketCapVariation24h * 100, 2))%
                </span>
            </div>
        </div>
        <div class="col">
            <div class="statsLabel">
                Volume Variation
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">Last Hour</div>
                <span class="statsVariation @(Model.CoinRecap.LastHourVolumeVariation > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.LastHourVolumeVariation > 0 ? "up":"down")"></i>
                    @Math.Round(Model.CoinRecap.LastHourVolumeVariation * 100, 2)%
                </span>
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">Last 3 Hours</div>
                <span class="statsVariation @(Model.CoinRecap.Last3HoursVolumeVariation > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.Last3HoursVolumeVariation > 0 ? "up":"down")"></i>
                    @Math.Round(Model.CoinRecap.Last3HoursVolumeVariation * 100, 2)%
                </span>
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">Last 9 Hours</div>
                <span class="statsVariation @(Model.CoinRecap.Last9HoursVolumeVariation > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.Last9HoursVolumeVariation > 0 ? "up":"down")"></i>
                    @Math.Round(Model.CoinRecap.Last9HoursVolumeVariation * 100, 2)%
                </span>
            </div>
        </div>
        <div class="col">
            <div class="statsLabel">
                Settings
            </div>
            <div class="form-check">
                @Html.CheckBoxFor(model => model.Coin.UnderSpotlight, new { @class = "form-check-input", @id = "spotlightCheckbox" })
                <label class="form-check-label statsSubLabel" for="spotlightCheckbox">Spotlight</label>
            </div>
            <div class="form-check">
                @Html.CheckBoxFor(model => model.Coin.Ignore, new { @class = "form-check-input", @id = "ignoredCheckbox" })
                <label class="form-check-label statsSubLabel" for="ignoredCheckbox">Ignore</label>
            </div>
        </div>
    </div>
</div>
<div id="chartContainerPrice" class="chart mx-auto"></div>
<div id="chartContainerVolume" class="chart mx-auto"></div>
<script>
    $(document).ready(function () {
        if (@Model.PriceSeries.Any()) {
            mySite.addNewMultiSeriesCanvasChart("chartContainerPrice", "Daily Price", @Html.Raw(JsonConvert.SerializeObject(Model.PriceSeries)),
                "Today", @Html.Raw(JsonConvert.SerializeObject(Model.PriceSeriesYesterday)), "Yesterday");
        }
        if (@Model.VolumeSeries.Any()) {
             mySite.addNewMultiSeriesCanvasChart("chartContainerVolume", "Daily Volume", @Html.Raw(JsonConvert.SerializeObject(Model.VolumeSeries)),
                "Today", @Html.Raw(JsonConvert.SerializeObject(Model.VolumeSeriesYesterday)), "Yesterday");
        }

        mySite.handleSpotlightCheckbox(@Model.Coin.Id);
        mySite.handleIgnoredCheckbox(@Model.Coin.Id);
     });
</script>

@section Scripts {
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
}

