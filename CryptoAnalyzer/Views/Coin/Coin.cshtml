@{
    ViewData["Title"] = "Coin Details";
}
@model CoinViewModel
@using Newtonsoft.Json;
@using CryptoAnalyzer.Extensions;
@using System.Globalization

<div class="statsBlock">
    <div class="row">
        <div class="col">
            <div class="statsLabel">
                Price
            </div>
            <div class="statsItem">
                <div class="statsValue">$ @Model.CoinRecap.LastPrice.RoundXSignificantDigit(3)</div>
                <span class="statsVariation @(Model.CoinRecap.PriceVariation24h > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.PriceVariation24h > 0 ? "up":"down")"></i>
                    @(Math.Round(Model.CoinRecap.PriceVariation24h*100, 2))%
                </span>
            </div>
            @if (Model.PriceSeries.Any())
            {
                <div class="statsItem">
                    <div class="statsSubLabel">@Model.PriceSeries.Last().X.ToLocalTime()</div>
                </div>
            }
        </div>
        <div class="col">
            <div class="statsLabel">
                Volume
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">$ @Model.CoinRecap.LastVolume.ToString("C2", CultureInfo.CurrentCulture)</div>
                <span class="statsVariation @(Model.CoinRecap.VoumeVariation24h > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.VoumeVariation24h > 0 ? "up":"down")"></i>
                    @(Math.Round(Model.CoinRecap.VoumeVariation24h * 100, 2))%
                </span>
            </div>
            <div class="statsLabel">
                Market Cap
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">$ @Model.CoinRecap.LastMarketCap.ToString("C2", CultureInfo.CurrentCulture)</div>
                <span class="statsVariation @(Model.CoinRecap.MarketCapVariation24h > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.MarketCapVariation24h > 0 ? "up":"down")"></i>
                    @(Math.Round(Model.CoinRecap.MarketCapVariation24h * 100, 2))%
                </span>
            </div>
        </div>
        <div class="col">
            <div class="statsLabel">
                Volume Variation
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">Last Hour</div>
                <span class="statsVariation @(Model.CoinRecap.LastHourVolumeVariation > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.LastHourVolumeVariation > 0 ? "up":"down")"></i>
                    @Math.Round(Model.CoinRecap.LastHourVolumeVariation * 100, 2)%
                </span>
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">Last 3 Hours</div>
                <span class="statsVariation @(Model.CoinRecap.Last3HoursVolumeVariation > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.Last3HoursVolumeVariation > 0 ? "up":"down")"></i>
                    @Math.Round(Model.CoinRecap.Last3HoursVolumeVariation * 100, 2)%
                </span>
            </div>
            <div class="statsItem">
                <div class="statsSubLabel">Last 9 Hours</div>
                <span class="statsVariation @(Model.CoinRecap.Last9HoursVolumeVariation > 0 ? "up":"down")">
                    <i class="arrow @(Model.CoinRecap.Last9HoursVolumeVariation > 0 ? "up":"down")"></i>
                    @Math.Round(Model.CoinRecap.Last9HoursVolumeVariation * 100, 2)%
                </span>
            </div>
        </div>
        <div class="col">
            <div class="statsLabel">
                Settings
            </div>
            <div class="form-check">
                @Html.CheckBoxFor(model => model.Coin.UnderSpotlight, new { @class = "form-check-input", @id = "spotlightCheckbox" })
                <label class="form-check-label statsSubLabel" for="spotlightCheckbox">Spotlight</label>
            </div>
            <div class="form-check">
                @Html.CheckBoxFor(model => model.Coin.Ignore, new { @class = "form-check-input", @id = "ignoredCheckbox" })
                <label class="form-check-label statsSubLabel" for="ignoredCheckbox">Ignore</label>
            </div>
            <div class="form-check">
                @Html.CheckBoxFor(model => model.Coin.FastRefresh, new { @class = "form-check-input", @id = "fastRefreshCheckbox" })
                <label class="form-check-label statsSubLabel" for="fastRefreshCheckbox">Fast Update</label>
            </div>
        </div>
    </div>
</div>
<div id="1min">
    <div id="chartContainerPrice" class="chart mx-auto bigchart"></div>
    @if (Model.RSI.Any())
    {
        <div id="chartContainerRSI" class="chart mx-auto"></div>
    }
</div>
<button type="button" id="btnSwitch" class="btn btn-primary">Standard</button>
<div id="grouped">
    <div id="chartContainerPriceGrouped" class="chart mx-auto bigchart"></div>
    @if (Model.RSI.Any())
    {
        <div id="chartContainerRSIGrouped" class="chart mx-auto"></div>
    }
</div>
@if (Model.OBV.Any())
{
    <div id="chartContainerOBV" class="chart mx-auto"></div>
}
<div id="chartContainerVolume" class="chart mx-auto"></div>
@if (Model.HitsSeries.Any())
{
    <div id="chartContainerHits" class="chart mx-auto"></div>
}
<div id="chartContainerPriceCompare" class="chart mx-auto"></div>

<div class="form-group notes">
    <label class="statsSubLabel" for="notesTextbox">Notes:</label>
    <textarea class="form-control" id="notesTextbox" rows="3">@Model.Coin.Details</textarea>
    <button type="button" id="btnNotes" class="btn btn-primary">Set</button>
</div>

<script>
    $(document).ready(function () {
        if (@Json.Serialize(Model.PriceSeries.Any())) {
            mySite.addSeriesMACDChart("chartContainerPrice", "Daily Price (Standard)", @Html.Raw(JsonConvert.SerializeObject(Model.PriceSeries)),
                "Today");
            mySite.addSeriesMACDChart("chartContainerPriceGrouped", "Daily Price (Grouped)", @Html.Raw(JsonConvert.SerializeObject(ChartDataPoint.Aggregate(TimeSpan.FromMinutes(5),Model.PriceSeries))),
                "Today");
        }
        if (@Json.Serialize(Model.RSI.Any())) {
            mySite.addChart("chartContainerRSI", "RSI (Standard)", @Html.Raw(JsonConvert.SerializeObject(Model.RSI)),
                "RSI");
            mySite.addChart("chartContainerRSIGrouped", "RSI (Grouped)", @Html.Raw(JsonConvert.SerializeObject(ChartDataPoint.Aggregate(TimeSpan.FromMinutes(5), Model.RSI))),
                "RSI");
        }
        if (@Json.Serialize(Model.OBV.Any())) {
            mySite.addChart("chartContainerOBV", "OBV", @Html.Raw(JsonConvert.SerializeObject(Model.OBV)),
                "OBV");
        }
        if (@Json.Serialize(Model.VolumeSeries.Any())) {
            mySite.addChart("chartContainerVolume", "Daily Volume Comparison", @Html.Raw(JsonConvert.SerializeObject(Model.VolumeSeries)),
                "Today", @Html.Raw(JsonConvert.SerializeObject(Model.VolumeSeriesYesterday)), "Yesterday");
        }
        if (@Json.Serialize(Model.HitsSeries.Any())) {
            mySite.addChart("chartContainerHits", "Daily Total Hits", @Html.Raw(JsonConvert.SerializeObject(Model.HitsSeries)),
                "Today");
        }
        if (@Json.Serialize(Model.PriceSeries.Any())) {
            mySite.addChart("chartContainerPriceCompare", "Daily Price Comparison", @Html.Raw(JsonConvert.SerializeObject(Model.PriceSeries)),
                "Today", @Html.Raw(JsonConvert.SerializeObject(Model.PriceSeriesYesterday)), "Yesterday");
        }

        $("#grouped").hide();
        $("#btnSwitch").hide();
        $("#btnSwitch").click(function () {
            if ($("#grouped").is(":visible")) {
                $(this).html('Standard');
            }
            else {
                $(this).html('Grouped');
            }
            $("#grouped").toggle();
            $("#1min").toggle();
        });
        mySite.handleSpotlightCheckbox(@Model.Coin.Id);
        mySite.handleIgnoredCheckbox(@Model.Coin.Id);
        mySite.handleFastRefreshCheckbox(@Model.Coin.Id);
        mySite.handleNotesTextbox(@Model.Coin.Id);
     });
</script>

@section Scripts {
    <script src="https://code.highcharts.com/stock/highstock.js"></script>
    <script src="https://code.highcharts.com/stock/modules/data.js"></script>
    <script src="https://code.highcharts.com/stock/modules/drag-panes.js"></script>
    <script src="https://code.highcharts.com/stock/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/stock/indicators/indicators.js"></script>
    <script src="https://code.highcharts.com/stock/indicators/pivot-points.js"></script>
    <script src="https://code.highcharts.com/stock/indicators/ema.js"></script>
    <script src="https://code.highcharts.com/stock/indicators/macd.js"></script>
    <script src="https://code.highcharts.com/themes/dark-unica.js"></script>
}

